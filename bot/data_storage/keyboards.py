# -*- coding: UTF-8 -*-
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import KeyboardButton, InlineKeyboardBuilder, ReplyKeyboardBuilder
from database.mongodb.interaction import Interaction


db = Interaction()
class Keyboards:
    def __init__(self) -> None:
        pass


    async def ultimate_keyboard(self, type_keyboard: str) -> ReplyKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã, –∞–¥—Ä–µ—Å–∞ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ—ã –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        """
        if type_keyboard == 'room':
            keyboard = ReplyKeyboardMarkup(
                keyboard = [
                    [
                        KeyboardButton(text="–ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏ –±–∞—à–Ω—è \"–ò–º–ø–µ—Ä–∏—è\"")
                    ],
                    [
                        KeyboardButton(text="–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä \"Mosenka-park-towers\"")
                    ]
                ],
                resize_keyboard=True, one_time_keyboard=True
            )
        elif type_keyboard == 'back_to_duration':
            keyboard = ReplyKeyboardMarkup(
                keyboard = [
                    [
                        KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                    ]
                ],
                resize_keyboard=True, one_time_keyboard=True
            )     
        return keyboard
    
    
    async def calendar_keyboard(self) -> InlineKeyboardBuilder:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        """ 
        builder = ReplyKeyboardBuilder()
        buttons = []
        builder.row(KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))

        now = datetime.now()

        current_month = now.month

        builder.row(KeyboardButton(text=datetime.now().strftime('%B')))

        for i in range(0, 5*7*3+int(now.isoweekday())):
            day = now + timedelta(days=i)
            buttons.append(KeyboardButton(text=day.strftime('%d.%m')))

            if day.strftime('%A') == 'Sunday':

                if len(buttons) != 7 and len(buttons) != 0:

                    for a in range(0, 7 - len(buttons)):
                        buttons.insert(0, KeyboardButton(text=f'----'))

                builder.row(*buttons)
                buttons = []
    
            if day.month != current_month:
                if buttons:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                    buttons.pop()

                if len(buttons) != 7 and len(buttons) != 0:

                    for a in range(0, 7 - len(buttons)):
                        buttons.append(KeyboardButton(text=f"----"))

                builder.row(*buttons)
                builder.row(KeyboardButton(text=day.strftime('%B')))
                buttons = []
                buttons.append(KeyboardButton(text=day.strftime('%d.%m')))
                current_month = day.month

        if len(buttons) != 7 and len(buttons) != 0:
                    for a in range(0, 7 - len(buttons)):
                        buttons.append(KeyboardButton(text="----"))

        builder.row(*buttons)

        return builder
    
    
    async def start_time_keyboard(self, user_id: int, no_access_intervals: dict) -> ReplyKeyboardBuilder:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        """
        builder = ReplyKeyboardBuilder()
        buttons = []
        builder.row(KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))

        entered_date = await db.get_data(user_id, 'date')
        time_slots = []
        start_time = datetime.strptime(entered_date + "09:00", '%Y-%m-%d%H:%M')
        end_time = datetime.strptime(entered_date + "19:00", '%Y-%m-%d%H:%M')

        current_slot_start = start_time

        while current_slot_start < end_time:
            current_slot_end = current_slot_start + timedelta(minutes=30)
            time_slots.append(current_slot_start)
            current_slot_start = current_slot_end

        available_time_slots = []
        response_logs = []

        if no_access_intervals:
          for slot in time_slots:
              for start, end in no_access_intervals:
                  if not(start <= slot < end) and (slot > datetime.now()):
                      response_logs.append('True')
                  else:
                      response_logs.append('False')
              if 'False' in response_logs:
                  response_logs = []
              else:
                  available_time_slots.append(slot)
                  response_logs = []
        else:
          for slot in time_slots:
              if (slot > datetime.now()):
                available_time_slots.append(slot)

        for ctr in range(0, len(available_time_slots)-1, 2):
            buttons.append(KeyboardButton(text=available_time_slots[ctr].strftime('%H:%M')))
            buttons.append(KeyboardButton(text=available_time_slots[ctr+1].strftime('%H:%M')))
            
            builder.row(*buttons)
            buttons=[]

        return builder
    
    
    async def duration_keyboard(self, user_id: int) -> ReplyKeyboardBuilder:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        """
        builder = ReplyKeyboardBuilder()
        buttons = []
        builder.row(KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))
        
        start_time = await db.get_data(user_id, 'start_time')
        entered_date = await db.get_data(user_id, 'date')
        illegal_intervals = await db.get_data(user_id, 'illegal_intervals')
    
        start_time = datetime.strptime(entered_date + start_time, '%Y-%m-%d%H:%M')
        end_meeting = datetime.strptime(entered_date + "19:00", '%Y-%m-%d%H:%M')
    
        for start, end in illegal_intervals:
            if (start > start_time):
                end_meeting = start
                break
            
        current_slot_start = start_time
        quantity_buttons = 0
        
        while current_slot_start < end_meeting:
            current_slot_end = current_slot_start + timedelta(minutes=30)
            duration = current_slot_end-start_time
            
            buttons.append(KeyboardButton(text=str(duration)[:-3]))
            
            quantity_buttons+=1
            current_slot_start = current_slot_end
            
            if quantity_buttons == 2:
                builder.row(*buttons)
                buttons = []
                quantity_buttons = 0
        
        builder.row(*buttons)

        return builder
    
    
    async def delete_meeting_button(self, name_meeting: str, start_time: str) -> InlineKeyboardBuilder:
        """
        –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        builder = InlineKeyboardBuilder(
            markup=[
                [
                    InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å {name_meeting}', callback_data=f'{name_meeting},{start_time}')
                ]
            ]
        )
        return builder
    
    
    async def possibilities_keyboard(self) -> InlineKeyboardBuilder:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞
        """
        builder = InlineKeyboardBuilder(
            markup=[
                [
                    InlineKeyboardButton(text="üöï–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏", callback_data='order_taxi')
                ],
                [
                    InlineKeyboardButton(text="üîë–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫", callback_data='order_pass')
                ],
                [
                    InlineKeyboardButton(text="‚ùå–ó–∞–∫–∞–∑–∞—Ç—å –≤–∏–∑–∏—Ç–∫—É", callback_data='order_cutaway')
                ],
                [
                    InlineKeyboardButton(text="‚úèÔ∏è–ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é", callback_data='order_office')
                ],
                [
                    InlineKeyboardButton(text="üõ†Ô∏è–ó–∞–∫–∞–∑–∞—Ç—å/–æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É", callback_data='order_technic')
                ],
                [
                    InlineKeyboardButton(text="üîì–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='gain_access')
                ],
                [
                    InlineKeyboardButton(text="üì±–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data='find_contact')
                ],
                [
                    InlineKeyboardButton(text="üóìÔ∏è–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é –∫–æ–º–Ω–∞—Ç—É", callback_data='rezervation_meeting_room')
                ],
                [
                    InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã", callback_data='cancel_rezervation_meeting_room')
                ],
                [
                    InlineKeyboardButton(text="üîµ–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é –≤ ZOOM", callback_data='create_zoom_meeting')
                ]
            ]
        )
        return builder
    
    
    async def breaks_keyboard(self) -> ReplyKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –ø–æ–ª–æ–º–æ–∫
        """
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–ü—Ä–∏–Ω—Ç–µ—Ä")
                ],
                [
                    KeyboardButton(text="–ù–æ—É—Ç–±—É–∫")
                ],
                [
                    KeyboardButton(text="–ö–æ–º–ø–ª—é–∫—Ç–µ—Ä")
                ]
            ],
            resize_keyboard=True, one_time_keyboard=True
        )
        
        return keyboard
    
